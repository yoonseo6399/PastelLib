import xyz.jpenilla.runtask.task.AbstractRun

plugins {
    id 'java'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.jetbrains.kotlin.jvm' version '2.1.10'
    id("org.jetbrains.kotlin.plugin.serialization") version "1.9.10"


    id("xyz.jpenilla.run-paper") version "2.3.1"

}

group = 'io.github.yoonseo'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc"
        url = uri("https://repo.papermc.io/repository/maven-public/")
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT")

    implementation("org.jetbrains.kotlin:kotlin-reflect:1.9.0-Beta")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.6.4")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.1")
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.VERSION_21
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = javaVersion.VERSION_21
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}
kotlin {
    targetCompatibility = JavaVersion.VERSION_21
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

shadowJar {

    archiveBaseName.set('PastelPlugin')
    archiveClassifier.set('')
    archiveVersion.set(version.toString())

    destinationDirectory = file("run/plugins")
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21.4")
    }
}
tasks.withType(AbstractRun.class).configureEach {
    javaLauncher.set(javaToolchains.launcherFor {
        vendor.set(JvmVendorSpec.JETBRAINS)
        languageVersion.set(JavaLanguageVersion.of(21))
    }.get())
    jvmArgs("-XX:+AllowEnhancedClassRedefinition")
}